🔢 K-th Element of Two Sorted Arrays

🚨 Problem Statement

Given two sorted arrays `a[]` and `b[]`, and an integer `k`, return the element that would be at the `k`-th position in the final sorted array formed by merging both arrays.

---

📥 Input

* `a[] = [2, 3, 6, 7, 9]`
* `b[] = [1, 4, 8, 10]`
* `k = 5`

🎯 Output

* `6`
  Explanation: Merged array is `[1, 2, 3, 4, 6, 7, 8, 9, 10]`. The 5th element is `6`.

---

📥 Input

* `a[] = [100, 112, 256, 349, 770]`
* `b[] = [72, 86, 113, 119, 265, 445, 892]`
* `k = 7`

🎯 Output

* `256`
  Explanation: Merged array is `[72, 86, 100, 112, 113, 119, 256, 265, 349, 445, 770, 892]`. The 7th element is `256`.

---

🧠 Constraints

* `1 ≤ a.length, b.length ≤ 10^6`
* `1 ≤ k ≤ a.length + b.length`
* `0 ≤ a[i], b[i] < 10^8`

---

🛠️ Method Used

* **Two Pointer Technique**:
  Iterate through both arrays in a merge-like fashion (as done in merge sort). Keep a counter `i` to track the number of merged elements. Once `i == k`, return the current element.

---

💻 Code (Java)

```java
class Solution {
    public int kthElement(int a[], int b[], int k) {
        int aIndex = 0;
        int bIndex = 0;
        int i = 0;

        while (aIndex < a.length && bIndex < b.length) {
            int first = a[aIndex];
            int second = b[bIndex];
            if (first < second) {
                i++;
                if (i == k) return first;
                aIndex++;
            } else {
                i++;
                if (i == k) return second;
                bIndex++;
            }
        }

        while (aIndex < a.length) {
            i++;
            if (i == k) return a[aIndex];
            aIndex++;
        }

        while (bIndex < b.length) {
            i++;
            if (i == k) return b[bIndex];
            bIndex++;
        }

        return -1;
    }
}
```

---
⏱️ Time Complexity

* `O(k)` — Worst-case merges up to `k` elements.

💾 Space Complexity

* `O(1)` — Constant space used.

---

✅ Summary

* Efficient for finding the `k`-th element from merged sorted arrays.
* Avoids full merge and saves time with early termination.
* Useful when only a single position element is needed instead of the full merged array.

---
