üìç Problem 1: Power of Two (LeetCode)

Question:
Check if a number n is a power of two.

Code:

class Solution {
    public boolean isPowerOfTwo(int n) {
        if (n == 1) {
            return true;
        } else if (n % 2 != 0 || n <= 0) {
            return false;
        }
        return isPowerOfTwo(n / 2);
    }
}


Time Complexity: O(logN)
Space Complexity: O(logN)

üìç Problem 2: Power of Three (LeetCode)

Question:
Check if a number n is a power of three.

Code:

class Solution {
    public boolean isPowerOfThree(int n) {
        if (n <= 0) {
            return false;
        } else if (n == 1) {
            return true;
        } else if (n % 3 != 0) {
            return false;
        }
        return isPowerOfThree(n / 3);
    }
}


Time Complexity: O(logN)
Space Complexity: O(logN)

üìç Problem 3: Power of Four (LeetCode)

Question:
Check if a number n is a power of four.

Code:

class Solution {
    public boolean isPowerOfFour(int n) {
        if (n <= 0) {
            return false;
        } else if (n == 1) {
            return true;
        } else if (n % 4 != 0) {
            return false;
        }
        return isPowerOfFour(n / 4);
    }
}


Time Complexity: O(logN)
Space Complexity: O(logN)
