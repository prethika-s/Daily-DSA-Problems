LongestConsecutiveSequence

Problem Statement

Given an unsorted array of integers `nums`, return the length of the longest consecutive elements sequence.

You must write an algorithm that runs in **O(n)** time.

---

Example 1:

Input: `nums = [100,4,200,1,3,2]`
Output: `4`
Explanation: The longest consecutive elements sequence is `[1, 2, 3, 4]`. Therefore its length is 4.

---

Example 2:

Input: `nums = [0,3,7,2,5,8,4,6,0,1]`
Output: `9`

---

Constraints:

* `0 <= nums.length <= 10^5`
* `-10^9 <= nums[i] <= 10^9`

---

Solutions

1. Brute Force Approach Using Sorting

```java
class Solution {
    public int longestConsecutive(int[] nums) {
        if (nums.length == 0) {
            return 0;
        }
        if (nums.length == 1) {
            return 1;
        }
        ArrayList<Integer> list = new ArrayList<>();
        for (int num : nums) {
            list.add(num);
        }
        Collections.sort(list);

        int maxCount = 1;
        int temp = 1;
        int prev = list.get(0);

        for (int i = 1; i < nums.length; i++) {
            int num = list.get(i);

            if (num == prev) {
                // Skip duplicate numbers
                continue;
            }
            if (num == prev + 1) {
                temp++;
            } else {
                temp = 1;
            }
            prev = num;
            maxCount = Math.max(maxCount, temp);
        }

        return maxCount;
    }
}
```

Approach

* Convert array to list and sort it.
* Traverse the sorted list while counting consecutive sequences.
* Skip duplicates and reset count when sequence breaks.
* Track and return the longest sequence found.

Pros

* Simple and easy to implement.
* Useful for small or medium-sized inputs.
* Intuitive and easy to debug.

Cons

* Time complexity is **O(n log n)** due to sorting.
* Extra space needed for the list.
* Not efficient for large inputs.

---

2. Optimized Approach Using HashSet

```java
class Solution {
    public int longestConsecutive(int[] nums) {
        if(nums.length == 0){
            return 0;
        }
        if(nums.length == 1){
            return 1;
        }
        HashSet<Integer> set = new HashSet<>();
        for(int num : nums){
            set.add(num);
        }
        int maxCount = 0;
        for(int num : set){
            if(!set.contains(num - 1)){
                int current = num;
                int temp = 1;
                while(set.contains(current + 1)){
                    current++;
                    temp++;
                }
                maxCount = Math.max(maxCount, temp);
            }
        }
        return maxCount;
    }
}
```

Approach

* Add all numbers into a HashSet for constant-time lookups.
* Iterate through set and identify start of sequences (numbers without predecessor).
* Count consecutive numbers from each start.
* Track and return the longest streak.

Pros

* Time complexity is O(n).
* No sorting needed.
* Efficient for large, unsorted inputs.
* Handles sparse data well.

Cons

* Uses extra memory for the HashSet.
* Slightly more complex logic than brute force.

Complexity Comparison

| Approach              | Time Complexity | Space Complexity | Notes                                |
| --------------------- | --------------- | ---------------- | ------------------------------------ |
| Brute Force (Sorting) | O(n log n)      | O(n)             | Sorting dominates runtime.           |
| HashSet Optimized     | O(n)            | O(n)             | Uses extra space but faster runtime. |
